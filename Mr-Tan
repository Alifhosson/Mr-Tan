#‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅùêéùêñùêçùêÑùêë‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
#ùêÑùêçùêÇùêëùêàùêèùêìùêÑùêÉ ùêÅùêò :ùêåùêë-ùêìùêÄùêç
#VERSION : 1.0.2
#ùêÜùêàùêìùêáùêîùêÅ : https://github.com/Tan-vai
#‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅùêåùêÄùêàùêç ùêåùêÑùêçùêî‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
import base64
exec(base64.b64decode(b''))
